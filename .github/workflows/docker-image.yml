name: Build and Push Multi-Arch Docker Image

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: ghcr.io/patrylakos/zad2
  CACHE_REPO: patrylakos/zad2-cache

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub for cache
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Budujemy lokalny obraz tylko dla amd64 do skanowania Trivy
      - name: Build single-arch image locally for CVE scan
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          tags: localbuild/zad2:scan

      # Skan obrazu lokalnego (tylko jeśli nie ma błędów CRITICAL lub HIGH, przechodzi dalej)
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: localbuild/zad2:scan
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH

      # Jeśli Trivy OK — budujemy i wypychamy multiarch obraz do GHCR
      - name: Build and push multi-arch image to ghcr.io
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.CACHE_REPO }}:cache
          cache-to: type=registry,ref=${{ env.CACHE_REPO }}:cache,mode=max
